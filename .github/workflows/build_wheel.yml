name: Build wheel

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    permissions: write-all
    strategy:
      max-parallel: 4
      matrix:
        platform: [ubuntu-latest]
        python-version: ["3.10"]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper tag checking

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Extract version from setup.py
        id: get_version
        uses: rsxdalv/extract-python-version@v1
        with:
          file-path: 'setup.py'
          fallback-version: '0.0.0'

      - name: Debug all outputs before version check
        run: |
          echo "=== Debug Information ==="
          echo "get_version.outputs.version: '${{ steps.get_version.outputs.version }}'"
          echo "get_version.outputs.tag: '${{ steps.get_version.outputs.tag }}'"
          echo "Length of version: ${#{{ steps.get_version.outputs.version }}}"
          echo "Length of tag: ${#{{ steps.get_version.outputs.tag }}}"
          if [ -z "${{ steps.get_version.outputs.version }}" ]; then
            echo "ERROR: Version is empty!"
          fi
          if [ -z "${{ steps.get_version.outputs.tag }}" ]; then
            echo "ERROR: Tag is empty!"
          fi
        id: version_check
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          TAG_NAME="${{ steps.get_version.outputs.tag }}"
          
          echo "Checking for existing tag: $TAG_NAME"
          
          if git tag -l | grep -q "^$TAG_NAME$"; then
            echo "Tag $TAG_NAME already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: $CURRENT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Install build tools only
        if: steps.version_check.outputs.should_release == 'true'
        run: python -m pip install --upgrade pip==23.3.2 setuptools wheel build

      - name: Build the wheel (no deps installed)
        if: steps.version_check.outputs.should_release == 'true'
        run: python -m build --wheel --outdir dist/

      - run: du -h dist/*
        if: steps.version_check.outputs.should_release == 'true'

      - uses: actions/upload-artifact@v4
        if: steps.version_check.outputs.should_release == 'true'
        with:
          path: dist/*.whl

      - name: Log Built Wheels
        if: steps.version_check.outputs.should_release == 'true'
        run: ls dist

      - name: Set wheel name
        if: steps.version_check.outputs.should_release == 'true'
        run: echo "wheel_name=$(basename dist/*.whl)" >> $GITHUB_ENV

      - name: Debug version outputs before create release
        if: steps.version_check.outputs.should_release == 'true'
        run: |
          echo "=== Pre-Release Debug ==="
          echo "Version: '${{ steps.get_version.outputs.version }}'"
          echo "Tag: '${{ steps.get_version.outputs.tag }}'"
          echo "Should release: '${{ steps.version_check.outputs.should_release }}'"
          echo "Wheel name: '${{ env.wheel_name }}'"
          # Test if the tag variable is accessible
          if [ -z "${{ steps.get_version.outputs.tag }}" ]; then
            echo "CRITICAL ERROR: Tag is empty at release time!"
            exit 1
          fi

      - name: Create Release
        if: steps.version_check.outputs.should_release == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.tag || format('v{0}', steps.get_version.outputs.version) }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            Automated release for version ${{ steps.get_version.outputs.version }}
            
            ## Changes
            - Built wheel: ${{ env.wheel_name }}
            
            ## Installation
            ```bash
            pip install ${{ env.wheel_name }}
            ```
          draft: false
          prerelease: false
          files: ./dist/*.whl