name: Build wheel

on:
  workflow_dispatch:
  create:
    tags:
      - v*

jobs:
  build:
    permissions: write-all
    strategy:
      max-parallel: 4
      matrix:
        platform: [ubuntu-latest]
        python-version: ["3.10"]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Extract version from setup.py
        id: get_version
        run: |
          if [ -f setup.py ]; then
            # Extract version from setup.py using multiple methods
            VERSION=$(python -c "
            import ast
            import re
            
            # Try to extract version from setup.py
            with open('setup.py', 'r') as f:
                content = f.read()
            
            # Method 1: Look for version= in setup() call
            version_match = re.search(r'version\s*=\s*[\'\"](.*?)[\'\"]', content)
            if version_match:
                print(version_match.group(1))
            else:
                # Method 2: Look for __version__ variable
                version_match = re.search(r'__version__\s*=\s*[\'\"](.*?)[\'\"]', content)
                if version_match:
                    print(version_match.group(1))
                else:
                    # Method 3: Try to execute setup.py and extract
                    try:
                        tree = ast.parse(content)
                        for node in ast.walk(tree):
                            if isinstance(node, ast.Call) and hasattr(node.func, 'id') and node.func.id == 'setup':
                                for keyword in node.keywords:
                                    if keyword.arg == 'version':
                                        if isinstance(keyword.value, ast.Str):
                                            print(keyword.value.s)
                                        elif isinstance(keyword.value, ast.Constant):
                                            print(keyword.value.value)
                                        break
                    except:
                        print('0.0.0')  # fallback version
            ")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
            echo "Found version: $VERSION"
          else
            echo "setup.py not found, using fallback"
            echo "version=0.0.0" >> $GITHUB_OUTPUT
            echo "tag=v0.0.0" >> $GITHUB_OUTPUT
          fi

      - name: Install old pip
        run: python -m pip install --upgrade pip==23.3.2
      - name: Install Deps
        run: python -m pip install . torch==2.3.1 wheel ninja build
      - name: Build the wheel
        run: python -m build --wheel --outdir dist/
      - run: du -h dist/*
      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.whl

      - name: Log Built Wheels
        run: |
          ls dist
  
      - name: Set wheel name
        run: echo "wheel_name=$(basename dist/*.whl)" >> $GITHUB_ENV
        
      - name: Get the tag version
        id: extract_branch
        run: |
          if [ "${{ github.event_name }}" == "create" ]; then
            # If triggered by tag creation, use the tag
            echo "branch=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            # If manually triggered, use version from setup.py
            echo "branch=${{ steps.get_version.outputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_branch.outputs.branch }}
          release_name: Release ${{ steps.extract_branch.outputs.branch }}
          body: |
            Automated release for version ${{ steps.get_version.outputs.version }}
            
            ## Changes
            - Built wheel: ${{ env.wheel_name }}
            
            ## Installation
            ```bash
            pip install <wheel-name>
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{env.wheel_name}}
          asset_name: ${{env.wheel_name}}
          asset_content_type: application/octet-stream
