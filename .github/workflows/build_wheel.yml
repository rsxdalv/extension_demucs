name: Build wheel

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    permissions: write-all
    strategy:
      max-parallel: 4
      matrix:
        platform: [ubuntu-latest]
        python-version: ["3.10"]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Extract version from setup.py
        id: get_version
        uses: rsxdalv/extract-python-version@v1
        with:
          file-path: 'setup.py'
          fallback-version: '0.0.0'

      - name: Check if version changed
        id: version_check
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.version }}"
          if git rev-parse "${{ steps.get_version.outputs.tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.get_version.outputs.tag }} already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: $CURRENT_VERSION"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Install build tools only
        if: steps.version_check.outputs.should_release == 'true'
        run: python -m pip install --upgrade pip==23.3.2 setuptools wheel build

      - name: Build the wheel (no deps installed)
        if: steps.version_check.outputs.should_release == 'true'
        run: python -m build --wheel --outdir dist/

      - run: du -h dist/*
        if: steps.version_check.outputs.should_release == 'true'

      - uses: actions/upload-artifact@v4
        if: steps.version_check.outputs.should_release == 'true'
        with:
          path: dist/*.whl

      - name: Log Built Wheels
        if: steps.version_check.outputs.should_release == 'true'
        run: ls dist

      - name: Set wheel name
        if: steps.version_check.outputs.should_release == 'true'
        run: echo "wheel_name=$(basename dist/*.whl)" >> $GITHUB_ENV

      - name: Get the tag version
        if: steps.version_check.outputs.should_release == 'true'
        id: extract_branch
        run: echo "branch=${{ steps.get_version.outputs.tag }}" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.version_check.outputs.should_release == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_branch.outputs.branch }}
          release_name: Release ${{ steps.extract_branch.outputs.branch }}
          body: |
            Automated release for version ${{ steps.get_version.outputs.version }}
            
            ## Changes
            - Built wheel: ${{ env.wheel_name }}
            
            ## Installation
            ```bash
            pip install <wheel-name>
            ```
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: steps.version_check.outputs.should_release == 'true'
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{env.wheel_name}}
          asset_name: ${{env.wheel_name}}
          asset_content_type: application/octet-stream
